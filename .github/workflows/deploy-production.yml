name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: PCI
  AKS_CLUSTER_NAME: pci-staging-aks
  ACR_NAME: pciregistry
  NAMESPACE: production
  PRODUCTION_URL: https://www.paralympicindia.com
  PRODUCTION_IP: 4.187.228.16

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: |
        az acr login --name ${{ env.ACR_NAME }}

    - name: Build and push Backend image
      run: |
        cd PCI-backend
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }} .
        docker tag ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/pci-backend:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-backend:latest

    - name: Build and push Frontend image
      run: |
        cd PCI
        docker build \
          --build-arg NEXT_PUBLIC_BACKEND_URL="${{ env.PRODUCTION_URL }}" \
          --build-arg NEXT_PUBLIC_API_URL="/api" \
          --no-cache \
          -t ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }} .
        docker tag ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create secrets
      run: |
        # Create database secrets
        kubectl create secret generic pci-postgres-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=postgres-user=${{ secrets.POSTGRES_USER }} \
          --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create backend secrets
        kubectl create secret generic pci-backend-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=database-url=${{ secrets.DATABASE_URL }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create frontend secrets
        kubectl create secret generic pci-frontend-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=nextauth-secret=${{ secrets.NEXTAUTH_SECRET }} \
          --from-literal=database-url=${{ secrets.DATABASE_URL }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Update production deployments with new images
      run: |
        # Update backend deployment with latest image
        kubectl set image deployment/pci-backend-prod \
          pci-backend=${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }} \
          -n ${{ env.NAMESPACE }}
        
        # Update frontend deployment with latest image  
        kubectl set image deployment/pci-frontend-prod \
          pci-frontend=${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }} \
          -n ${{ env.NAMESPACE }}

    - name: Wait for deployments to complete
      run: |
        kubectl rollout status deployment/pci-backend-prod --namespace=${{ env.NAMESPACE }} --timeout=600s
        kubectl rollout status deployment/pci-frontend-prod --namespace=${{ env.NAMESPACE }} --timeout=600s

    - name: Verify deployment and test API
      run: |
        echo "Deployment completed successfully!"
        echo "Production URL: ${{ env.PRODUCTION_URL }}"
        echo "IP Address: ${{ env.PRODUCTION_IP }}"
        
        # Wait a bit for pods to be fully ready
        sleep 30
        
        # Test API endpoint
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=pci-backend-prod
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=pci-frontend-prod
        
        echo "Paralympic Committee of India website deployed successfully! üèÖüáÆüá≥"
