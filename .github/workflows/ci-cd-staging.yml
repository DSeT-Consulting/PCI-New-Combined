name: CI/CD - Staging Deployment

on:
  push:
    branches:
      - develop
      - staging
  pull_request:
    branches:
      - develop
      - staging
  workflow_dispatch:  # Allow manual triggering
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging

env:
  AZURE_RESOURCE_GROUP: PCI
  AKS_CLUSTER_NAME: pci-staging-aks
  ACR_NAME: pcistaging
  NAMESPACE: pci-staging

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for Backend
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: PCI-backend/package-lock.json

    - name: Install Backend Dependencies
      run: |
        cd PCI-backend
        npm install

    - name: Run Backend Tests
      run: |
        cd PCI-backend
        npm test

    - name: Setup pnpm for Frontend
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Setup Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: PCI/pnpm-lock.yaml

    - name: Install Frontend Dependencies
      run: |
        cd PCI
        pnpm install

    - name: Build Frontend
      run: |
        cd PCI
        pnpm run build

  build-and-deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

    - name: Login to ACR
      run: |
        az acr login --name ${{ env.ACR_NAME }}

    - name: Setup pnpm for Frontend Build
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Build and push Backend image
      run: |
        cd PCI-backend
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }} .
        docker tag ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/pci-backend:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-backend:latest

    - name: Build and push Frontend image
      run: |
        cd PCI
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }} .
        docker tag ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:latest

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create/Update secrets
      run: |
        # Create database secrets
        kubectl create secret generic pci-postgres-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=postgres-user=${{ secrets.POSTGRES_USER }} \
          --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create backend secrets
        kubectl create secret generic pci-backend-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=database-url=${{ secrets.DATABASE_URL_STAGING }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create frontend secrets
        kubectl create secret generic pci-frontend-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=nextauth-secret=${{ secrets.NEXTAUTH_SECRET }} \
          --from-literal=database-url=${{ secrets.DATABASE_URL_STAGING }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Update image tags in Kustomization
      run: |
        # Update staging kustomization with new image tags
        sed -i "s|newTag: latest|newTag: ${{ github.sha }}|g" k8s/overlays/staging/kustomization.yaml

    - name: Deploy to Staging
      run: |
        kubectl apply -k k8s/overlays/staging/ --namespace=${{ env.NAMESPACE }}

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/pci-backend --namespace=${{ env.NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/pci-frontend --namespace=${{ env.NAMESPACE }} --timeout=300s

    - name: Run Database Migrations
      run: |
        # Wait for backend pod to be ready
        kubectl wait --for=condition=ready pod -l app=pci-backend -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Get backend pod name and run migrations
        POD_NAME=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=pci-backend -o jsonpath='{.items[0].metadata.name}')
        kubectl exec -n ${{ env.NAMESPACE }} $POD_NAME -- npm run drizzle:migrate

    - name: Staging Deployment Summary
      run: |
        echo "üèÜ Paralympic Committee of India - Staging Deployed! üèÜ"
        echo "=================================================="
        echo "Environment: Staging"
        echo "Namespace: ${{ env.NAMESPACE }}"
        echo "Backend Image: ${{ env.ACR_NAME }}.azurecr.io/pci-backend:${{ github.sha }}"
        echo "Frontend Image: ${{ env.ACR_NAME }}.azurecr.io/pci-frontend:${{ github.sha }}"
        echo "=================================================="
        
        # Get service info
        kubectl get services --namespace=${{ env.NAMESPACE }}
        kubectl get ingress --namespace=${{ env.NAMESPACE }}
